<launch>

  <!-- husky_gazebo husky_playpen.launch -->
  <group>
    <!-- husky_gazebo husky_playpen.launch -->
    <group>
      <arg name="robot_namespace" default="/"/>

      <arg name="x" default="0.0"/>
      <arg name="y" default="0.0"/>
      <arg name="z" default="0.0"/>
      <arg name="yaw" default="0.0"/>

      <arg name="laser_enabled" default="$(optenv HUSKY_LMS1XX_ENABLED true)"/>
      <arg name="urdf_extras" default="$(optenv HUSKY_URDF_EXTRAS)"/>

      <group ns="$(arg robot_namespace)">
        <!-- Single master bringup -->
        <include file="$(find husky_control)/launch/control.launch">
          <arg name="laser_enabled" value="$(arg laser_enabled)"/>
          <arg name="urdf_extras" value="$(arg urdf_extras)"/>
        </include>
        <!-- Spawn robot in gazebo -->
        <node name="spawn_husky_model" pkg="gazebo_ros" type="spawn_model"
            args="-x $(arg x)
                  -y $(arg y)
                  -z $(arg z)
                  -Y $(arg yaw)
                  -unpause
                  -urdf
                  -param robot_description
                  -model $(arg robot_namespace)" />
      </group>
    </group>
    <!-- husky_gazebo playpen.launch -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="$(find husky_gazebo)/worlds/clearpath_playpen.world"/>
      <arg name="paused" value="false"/>
      <arg name="use_sim_time" value="true"/>
      <arg name="gui" value="true"/>
      <arg name="headless" value="false"/>
      <arg name="debug" value="false"/>
    </include>
  </group>

  <!-- husky_viz view_robot.launch -->
  <group>
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find husky_viz)/rviz/robot.rviz" output="screen"/>
  </group>

  <!-- husky_navigation amcl_demo.launch -->
  <group>
    <!-- Run the map server -->
    <arg name="map_file" default="$(find husky_navigation)/maps/playpen_map.yaml"/>

    <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

    <!--- Run AMCL -->
    <!-- husky_navigation amcl.launch -->
    <group>
      <arg name="use_map_topic" default="true"/>
      <arg name="scan_topic" default="scan" />

      <node pkg="amcl" type="amcl" name="amcl">
        <param name="use_map_topic" value="$(arg use_map_topic)"/>
        <!-- Publish scans from best pose at a max of 10 Hz -->
        <param name="odom_model_type" value="diff"/>
        <param name="odom_alpha5" value="0.1"/>
        <param name="gui_publish_rate" value="10.0"/>
        <param name="laser_max_beams" value="60"/>
        <param name="laser_max_range" value="12.0"/>
        <param name="min_particles" value="500"/>
        <param name="max_particles" value="2000"/>
        <param name="kld_err" value="0.05"/>
        <param name="kld_z" value="0.99"/>
        <param name="odom_alpha1" value="0.2"/>
        <param name="odom_alpha2" value="0.2"/>
        <!-- translation std dev, m -->
        <param name="odom_alpha3" value="0.2"/>
        <param name="odom_alpha4" value="0.2"/>
        <param name="laser_z_hit" value="0.5"/>
        <param name="laser_z_short" value="0.05"/>
        <param name="laser_z_max" value="0.05"/>
        <param name="laser_z_rand" value="0.5"/>
        <param name="laser_sigma_hit" value="0.2"/>
        <param name="laser_lambda_short" value="0.1"/>
        <param name="laser_model_type" value="likelihood_field"/>
        <!-- <param name="laser_model_type" value="beam"/> -->
        <param name="laser_likelihood_max_dist" value="2.0"/>
        <param name="update_min_d" value="0.25"/>
        <param name="update_min_a" value="0.2"/>
        <param name="odom_frame_id" value="odom"/>
        <param name="resample_interval" value="1"/>
        <!-- Increase tolerance because the computer can get quite busy -->
        <param name="transform_tolerance" value="1.0"/>
        <param name="recovery_alpha_slow" value="0.0"/>
        <param name="recovery_alpha_fast" value="0.0"/>
        <remap from="scan" to="$(arg scan_topic)"/>
      </node>
    </group>

    <!--- Run Move Base -->
    <!-- husky_navigation move_base.launch -->
    <group
      <arg name="no_static_map" default="false"/>

      <arg name="base_global_planner" default="navfn/NavfnROS"/>
      <arg name="base_local_planner" default="dwa_local_planner/DWAPlannerROS"/>

      <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">

        <param name="base_global_planner" value="$(arg base_global_planner)"/>
        <param name="base_local_planner" value="$(arg base_local_planner)"/>
        <rosparam file="$(find husky_navigation)/config/planner.yaml" command="load"/>

        <!-- observation sources located in costmap_common.yaml -->
        <rosparam file="$(find husky_navigation)/config/costmap_common.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find husky_navigation)/config/costmap_common.yaml" command="load" ns="local_costmap" />

        <!-- local costmap, needs size -->
        <rosparam file="$(find husky_navigation)/config/costmap_local.yaml" command="load" ns="local_costmap" />
        <param name="local_costmap/width" value="10.0"/>
        <param name="local_costmap/height" value="10.0"/>

        <!-- static global costmap, static map provides size -->
        <rosparam file="$(find husky_navigation)/config/costmap_global_static.yaml" command="load" ns="global_costmap" unless="$(arg no_static_map)"/>

        <!-- global costmap with laser, for odom_navigation_demo -->
        <rosparam file="$(find husky_navigation)/config/costmap_global_laser.yaml" command="load" ns="global_costmap" if="$(arg no_static_map)"/>
        <param name="global_costmap/width" value="100.0" if="$(arg no_static_map)"/>
        <param name="global_costmap/height" value="100.0" if="$(arg no_static_map)"/>
      </node>
    </group>
  </group>
</launch>